import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/
public class Solution 
{
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) 
    {
        ArrayList<Integer> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        HashMap<TreeNode<Integer>,Node> hs=new HashMap<>();
        HashMap<Integer,ArrayList<Integer>> map=new HashMap<>();
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        Queue<TreeNode<Integer>> q=new LinkedList<>();
        q.add(root);
        hs.put(root,new Node(root.data,0));
        while(!q.isEmpty()){
            TreeNode<Integer> node=q.poll();
            int lvl=hs.get(node).lvl;
            if(!pq.contains(lvl)){
                pq.add(lvl);
            }
            if(map.containsKey(lvl)){
                map.get(lvl).add(node.data);
            }else{
                map.put(lvl,new ArrayList<>(Arrays.asList(node.data)));
            }
            if(node.left!=null){
                q.add(node.left);
                hs.put(node.left,new Node(node.left.data,lvl-1));
            }
            if(node.right!=null){
                q.add(node.right);
                hs.put(node.right,new Node(node.right.data,lvl+1));
            }
        }
        while(!pq.isEmpty()){
            for(Integer it:map.get(pq.poll())){
                ans.add(it);
            }
        }
        return ans;
    }
}
class Node{
    int data,lvl;
    public Node(int data,int lvl){
        this.data=data;
        this.lvl=lvl;
    }
}
