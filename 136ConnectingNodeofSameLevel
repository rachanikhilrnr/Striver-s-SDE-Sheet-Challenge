import java.util.* ;
import java.io.*; 
/*
    ----------------- Binary Tree node class for reference -----------------

    class BinaryTreeNode<T> {
	    public T data;
	    public BinaryTreeNode<T> left;
	    public BinaryTreeNode<T> right;
	    public BinaryTreeNode<T> next;

	    BinaryTreeNode(T data) {
	        this.data = data;
	        left = null;
	        right = null;
	        next = null;
	    }
	};

*/

public class Solution {
	public static void connectNodes(BinaryTreeNode<Integer> root) {
		if(root!=null){
			Queue<BinaryTreeNode<Integer>> q=new LinkedList<>();
			q.add(root);
			BFS(q);
		}
		else{}
	}
	public static void BFS(Queue<BinaryTreeNode<Integer>> q){
		ArrayList<BinaryTreeNode<Integer>> r=new ArrayList<>();
		Queue<BinaryTreeNode<Integer>> nxtq=new LinkedList<>();
		while(!q.isEmpty()){
			BinaryTreeNode<Integer> node=q.poll();
			if(node.left!=null){
				nxtq.add(node.left);
			}
			if(node.right!=null){
				nxtq.add(node.right);
			}
			r.add(node);
		}
		for(int i=1;i<r.size();i++){
			BinaryTreeNode<Integer> n1=r.get(i-1);
			BinaryTreeNode<Integer> n2=r.get(i);
			n1.next=n2;
		}
		if(!nxtq.isEmpty()){
			BFS(nxtq);
		}
	}
}