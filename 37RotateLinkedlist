/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;

     Node()
     {
         this.data = 0;
         this.next = null;
     }

     Node(int data)
     {
         this.data = data;
         this.next = null;
     }

     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
     }
 };

 *****************************************************************/
import java.util.*;
public class Solution {
    public static Node rotate(Node head, int k) {
        ArrayList<Integer> arr=new ArrayList<>();
        Node temp=head;
        while(temp!=null){
            arr.add(temp.data);
            temp=temp.next;
        }
        Node res=new Node(0);
        Node t=res;
        if(k==arr.size() || (k%arr.size())==arr.size()){
            for(int i=0;i<arr.size();i++){
                t.next=new Node(arr.get(i));
                t=t.next;
            }
            return res.next;
        }
        else{
            int l=k%arr.size();
            ArrayList<Integer> r=new ArrayList<>();
            while(l>0){
                r.add(arr.get(arr.size()-1));
                arr.remove(arr.size()-1);
                l--;
            }
            Collections.reverse(r);
            for(int i=0;i<arr.size();i++){
                r.add(arr.get(i));
            }
            for(int j=0;j<r.size();j++){
                t.next=new Node(r.get(j));
                t=t.next;
            }
            return res.next;
        }
    }
}